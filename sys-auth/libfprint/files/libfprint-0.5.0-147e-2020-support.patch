diff --git a/AUTHORS b/AUTHORS
index 6ce0375..2b9f267 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -8,3 +8,4 @@ Copyright (C) 2007-2008,2012 Vasily Khoruzhick <anarsoul@gmail.com>
 Copyright (C) 2007 Jan-Michael Brummer <buzz2@gmx.de>
 Copyright (C) 2007 Anthony Bretaudeau <wxcover@users.sourceforge.net>
 Copyright (C) 2010 Hugo Grostabussiat <dw23.devel@gmail.com>
+Copyright (C) 2012 Timo Ter√§s <timo.teras@iki.fi>
diff --git a/configure.ac b/configure.ac
index 3c779f4..b2ec4a7 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2,7 +2,7 @@ AC_INIT([libfprint], [0.5.0])
 AM_INIT_AUTOMAKE([1.11 no-dist-gzip dist-xz check-news])
 AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_SRCDIR([libfprint/core.c])
-AM_CONFIG_HEADER([config.h])
+AC_CONFIG_HEADERS([config.h])
 
 # Enable silent build when available (Automake 1.11)
 m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])
@@ -156,7 +156,7 @@ PKG_CHECK_MODULES(CRYPTO, nss)
 AC_SUBST(CRYPTO_CFLAGS)
 AC_SUBST(CRYPTO_LIBS)
 
-PKG_CHECK_MODULES(GLIB, "glib-2.0")
+PKG_CHECK_MODULES(GLIB, [glib-2.0 >= 2.28])
 AC_SUBST(GLIB_CFLAGS)
 AC_SUBST(GLIB_LIBS)
 
@@ -173,6 +173,10 @@ AC_ARG_ENABLE(udev-rules,
 	[ENABLE_UDEV_RULES=yes]) dnl Default value
 AM_CONDITIONAL(ENABLE_UDEV_RULES, test x$ENABLE_UDEV_RULES = "xyes")
 
+if test $ENABLE_UDEV_RULES = no && test -d .git/ ; then
+	AC_MSG_ERROR(--disable-udev-rules can only be used when building from tarballs)
+fi
+
 AC_ARG_WITH(udev-rules-dir,
 	    AS_HELP_STRING([--with-udev-rules-dir=DIR],[Installation path for udev rules @<:@auto@:>@]),
 	    [ac_with_udev_rules_dir=$withval],
diff --git a/libfprint/drivers/upeke2.c b/libfprint/drivers/upeke2.c
index ed8f43d..a7db54d 100644
--- a/libfprint/drivers/upeke2.c
+++ b/libfprint/drivers/upeke2.c
@@ -46,6 +46,11 @@
 #define MSG_READ_BUF_SIZE 0x40
 #define MAX_DATA_IN_READ_BUF (MSG_READ_BUF_SIZE - 9)
 
+enum {
+        UPEKE2_2016,
+        UPEKE2_2020,
+};
+
 struct upeke2_dev {
 	gboolean enroll_passed;
 	gboolean first_verify_iteration;
@@ -848,8 +853,10 @@ static struct fpi_ssm *deinitsm_new(struct fp_dev *dev)
 
 static int discover(struct libusb_device_descriptor *dsc, uint32_t *devtype)
 {
-	/* Revision 2 is what we're interested in */
-	if (dsc->bcdDevice == 2)
+	if (dsc->idProduct == 0x2016 && dsc->bcdDevice == 2)
+		return 1;
+
+	if (dsc->idProduct == 0x2020 && dsc->bcdDevice == 1)
 		return 1;
 
 	return 0;
@@ -1453,7 +1460,8 @@ static int verify_stop(struct fp_dev *dev, gboolean iterating)
 }
 
 static const struct usb_id id_table[] = {
-	{ .vendor = 0x147e, .product = 0x2016 },
+	{ .vendor = 0x147e, .product = 0x2016, .driver_data = UPEKE2_2016 },
+	{ .vendor = 0x147e, .product = 0x2020, .driver_data = UPEKE2_2020 },
 	{ 0, 0, 0, }, /* terminating entry */
 };
 
diff --git a/libfprint/drivers/uru4000.c b/libfprint/drivers/uru4000.c
index 541245a..ccaa87f 100644
--- a/libfprint/drivers/uru4000.c
+++ b/libfprint/drivers/uru4000.c
@@ -789,15 +789,18 @@ static void imaging_complete(struct fpi_ssm *ssm)
 	int r = ssm->error;
 	fpi_ssm_free(ssm);
 
+	/* Report error before exiting imaging loop - the error handler
+	 * can request state change, which needs to be postponed to end of
+	 * this function. */
+	if (r)
+		fpi_imgdev_session_error(dev, r);
+
 	g_free(urudev->img_data);
 	urudev->img_data = NULL;
 
 	libusb_free_transfer(urudev->img_transfer);
 	urudev->img_transfer = NULL;
 
-	if (r)
-		fpi_imgdev_session_error(dev, r);
-
 	r = execute_state_change(dev);
 	if (r)
 		fpi_imgdev_session_error(dev, r);
@@ -994,16 +997,19 @@ static void init_scanpwr_irq_cb(struct fp_img_dev *dev, int status,
 	uint16_t type, void *user_data)
 {
 	struct fpi_ssm *ssm = user_data;
+	struct uru4k_dev *urudev = dev->priv;
 
 	if (status)
 		fpi_ssm_mark_aborted(ssm, status);
 	else if (type != IRQDATA_SCANPWR_ON)
 		fp_dbg("ignoring interrupt");
-	else if (ssm->cur_state != INIT_AWAIT_SCAN_POWER)
-		fp_err("ignoring scanpwr interrupt due to being in wrong state %d",
-			ssm->cur_state);
-	else
+	else if (ssm->cur_state != INIT_AWAIT_SCAN_POWER) {
+		fp_dbg("early scanpwr interrupt");
+		urudev->scanpwr_irq_timeouts = -1;
+	} else {
+		fp_dbg("late scanpwr interrupt");
 		fpi_ssm_next_state(ssm);
+	}
 }
 
 static void init_scanpwr_timeout(void *user_data)
@@ -1053,14 +1059,21 @@ static void init_run_state(struct fpi_ssm *ssm)
 			fpi_ssm_next_state(ssm);
 		break;
 	case INIT_POWERUP: ;
+		if (!IRQ_HANDLER_IS_RUNNING(urudev)) {
+			fpi_ssm_mark_aborted(ssm, -EIO);
+			break;
+		}
+		urudev->irq_cb_data = ssm;
+		urudev->irq_cb = init_scanpwr_irq_cb;
+
 		struct fpi_ssm *powerupsm = fpi_ssm_new(dev->dev, powerup_run_state,
 			POWERUP_NUM_STATES);
 		powerupsm->priv = dev;
 		fpi_ssm_start_subsm(ssm, powerupsm);
 		break;
 	case INIT_AWAIT_SCAN_POWER:
-		if (!IRQ_HANDLER_IS_RUNNING(urudev)) {
-			fpi_ssm_mark_aborted(ssm, -EIO);
+		if (urudev->scanpwr_irq_timeouts < 0) {
+			fpi_ssm_next_state(ssm);
 			break;
 		}
 
@@ -1073,13 +1086,12 @@ static void init_run_state(struct fpi_ssm *ssm)
 			fpi_ssm_mark_aborted(ssm, -ETIME);
 			break;
 		}
-
-		urudev->irq_cb_data = ssm;
-		urudev->irq_cb = init_scanpwr_irq_cb;
 		break;
 	case INIT_DONE:
-		fpi_timeout_cancel(urudev->scanpwr_irq_timeout);
-		urudev->scanpwr_irq_timeout = NULL;
+		if (urudev->scanpwr_irq_timeout) {
+			fpi_timeout_cancel(urudev->scanpwr_irq_timeout);
+			urudev->scanpwr_irq_timeout = NULL;
+		}
 		urudev->irq_cb_data = NULL;
 		urudev->irq_cb = NULL;
 		fpi_ssm_next_state(ssm);
diff --git a/libfprint/imgdev.c b/libfprint/imgdev.c
index 14e41ae..1ed3f6d 100644
--- a/libfprint/imgdev.c
+++ b/libfprint/imgdev.c
@@ -145,7 +145,10 @@ void fpi_imgdev_report_finger_status(struct fp_img_dev *imgdev,
 	case IMG_ACTION_ENROLL:
 		fp_dbg("reporting enroll result");
 		fpi_drvcb_enroll_stage_completed(imgdev->dev, r, data, img);
-		if (r > 0 && r != FP_ENROLL_COMPLETE && r != FP_ENROLL_FAIL) {
+		/* the callback can cancel enrollment, so recheck current
+		 * action and the status to see if retry is needed */
+		if (imgdev->action == IMG_ACTION_ENROLL &&
+		    r > 0 && r != FP_ENROLL_COMPLETE && r != FP_ENROLL_FAIL) {
 			imgdev->action_result = 0;
 			imgdev->action_state = IMG_ACQUIRE_STATE_AWAIT_FINGER_ON;
 			dev_change_state(imgdev, IMG_ACQUIRE_STATE_AWAIT_FINGER_ON);
